// Generated by CoffeeScript 1.6.3
(function() {
  var JadePages, fs, fspath, jade, minify, mkdirp, progeny, _;

  fs = require("fs");

  fspath = require("path");

  _ = require("lodash");

  mkdirp = require("mkdirp");

  jade = require("jade");

  minify = require("html-minifier").minify;

  progeny = require('progeny');

  module.exports = JadePages = (function() {
    JadePages.prototype.brunchPlugin = true;

    JadePages.prototype.type = "template";

    JadePages.prototype.extension = "jade";

    JadePages.prototype.DEFAULT_DESTINATION_FN = function(path) {
      return path.replace(/^app[\/\\](.*)\.jade$/, "$1.html");
    };

    JadePages.prototype.DEFAULT_JADE_OPTIONS = {
      doctype: "html"
    };

    JadePages.prototype.DEFAULT_HTMLMIN_OPTIONS = {
      removeComments: true,
      removeCommentsFromCDATA: true,
      removeCDATASectionsFromCDATA: true,
      collapseBooleanAttributes: true,
      useShortDoctype: true,
      removeEmptyAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true
    };

    function JadePages(config) {
      var filter, fn, htmlminConfig, jadeConfig, optimize, pluginConfig, _ref, _ref1, _ref2;
      optimize = config.optimize;
      pluginConfig = (_ref = config.plugins) != null ? _ref.jadePages : void 0;
      this.pattern = pluginConfig != null ? pluginConfig.pattern : void 0;
      this.publicPath = fspath.resolve(config.paths["public"]);
      this.destinationFn = (_ref1 = pluginConfig != null ? pluginConfig.destination : void 0) != null ? _ref1 : this.DEFAULT_DESTINATION_FN;
      this.getDependencies = progeny({
        rootPath: config.paths.root
      });
      jadeConfig = _.extend({}, pluginConfig != null ? pluginConfig.jade : void 0);
      this.jadeLocals = jadeConfig.locals;
      delete jadeConfig.locals;
      this.jadeOptions = _.extend(jadeConfig, this.DEFAULT_JADE_OPTIONS);
      if (optimize) {
        this.jadeOptions.pretty = false;
      }
      _ref2 = pluginConfig != null ? pluginConfig.filters : void 0;
      for (filter in _ref2) {
        fn = _ref2[filter];
        jade.filters[filter] = fn;
      }
      this.htmlmin = false;
      if (optimize) {
        htmlminConfig = pluginConfig != null ? pluginConfig.htmlmin : void 0;
        if (_.isBoolean(htmlminConfig)) {
          this.htmlmin = htmlminConfig;
          this.htmlminOptions = _.extend({}, this.DEFAULT_HTMLMIN_OPTIONS);
        } else if (_.isObject(htmlminConfig)) {
          this.htmlmin = true;
          this.htmlminOptions = _.extend({}, htmlminConfig);
        }
      }
    }

    JadePages.prototype.compile = function(data, path, callback) {
      var destinationDir, destinationPath, err, error, result, templateFn;
      try {
        this.jadeOptions.filename = path;
        templateFn = jade.compile(data, this.jadeOptions);
        result = templateFn(this.jadeLocals);
        if (this.htmlmin) {
          result = minify(result, this.htmlminOptions);
        }
        destinationPath = this.destinationFn(path);
        destinationPath = fspath.join(this.publicPath, destinationPath);
        destinationDir = fspath.dirname(destinationPath);
        mkdirp.sync(destinationDir);
        return fs.writeFileSync(destinationPath, result);
      } catch (_error) {
        err = _error;
        console.error("Error while processing '" + path + "': " + (err.toString()));
        return error = err;
      } finally {
        callback(error, "");
      }
    };

    return JadePages;

  })();

}).call(this);
